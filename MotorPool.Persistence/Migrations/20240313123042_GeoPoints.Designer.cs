// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MotorPool.Persistence;

#nullable disable

namespace MotorPool.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240313123042_GeoPoints")]
    partial class GeoPoints
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MotorPool.Domain.Driver", b =>
                {
                    b.Property<int>("DriverId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DriverId"));

                    b.Property<int?>("ActiveVehicleId")
                        .HasColumnType("int");

                    b.Property<int?>("EnterpriseId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Salary")
                        .HasPrecision(9, 3)
                        .HasColumnType("decimal(9,3)");

                    b.HasKey("DriverId");

                    b.HasIndex("ActiveVehicleId");

                    b.HasIndex("EnterpriseId");

                    b.ToTable("Drivers");
                });

            modelBuilder.Entity("MotorPool.Domain.DriverVehicle", b =>
                {
                    b.Property<int>("DriverId")
                        .HasColumnType("int");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int");

                    b.HasKey("DriverId", "VehicleId");

                    b.HasIndex("VehicleId");

                    b.ToTable("DriverVehicle");
                });

            modelBuilder.Entity("MotorPool.Domain.Enterprise", b =>
                {
                    b.Property<int>("EnterpriseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EnterpriseId"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateOnly>("FoundedOn")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TimeZoneId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("VAT")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("EnterpriseId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("VAT")
                        .IsUnique();

                    b.ToTable("Enterprises");

                    b.HasData(
                        new
                        {
                            EnterpriseId = 1,
                            City = "New York",
                            FoundedOn = new DateOnly(2012, 1, 1),
                            Name = "Garosh industries",
                            Street = "5th Avenue",
                            TimeZoneId = "America/New_York",
                            VAT = "US123456789"
                        },
                        new
                        {
                            EnterpriseId = 2,
                            City = "Los Angeles",
                            FoundedOn = new DateOnly(2004, 4, 1),
                            Name = "Apple",
                            Street = "Hollywood Boulevard",
                            TimeZoneId = "America/Los_Angeles",
                            VAT = "US987654321"
                        },
                        new
                        {
                            EnterpriseId = 3,
                            City = "Chicago",
                            FoundedOn = new DateOnly(2000, 4, 4),
                            Name = "Microsoft",
                            Street = "Michigan Avenue",
                            TimeZoneId = "America/Chicago",
                            VAT = "US123789456"
                        },
                        new
                        {
                            EnterpriseId = 4,
                            City = "Houston",
                            FoundedOn = new DateOnly(1994, 7, 5),
                            Name = "Amazon",
                            Street = "Texas Avenue",
                            TimeZoneId = "America/Chicago",
                            VAT = "US456123789"
                        },
                        new
                        {
                            EnterpriseId = 5,
                            City = "Vladimir",
                            FoundedOn = new DateOnly(1950, 1, 1),
                            Name = "Tochmash",
                            Street = "Severnaya Street",
                            TimeZoneId = "Europe/Moscow",
                            VAT = "RU789456123"
                        },
                        new
                        {
                            EnterpriseId = 6,
                            City = "Berlin",
                            FoundedOn = new DateOnly(1990, 4, 1),
                            Name = "SAP",
                            Street = "Wehlistrasse",
                            TimeZoneId = "Etc/UTC",
                            VAT = "DE3242354325"
                        });
                });

            modelBuilder.Entity("MotorPool.Domain.EnterpriseManager", b =>
                {
                    b.Property<int>("ManagerId")
                        .HasColumnType("int");

                    b.Property<int>("EnterpriseId")
                        .HasColumnType("int");

                    b.HasKey("ManagerId", "EnterpriseId");

                    b.HasIndex("EnterpriseId");

                    b.ToTable("EnterpriseManagers");

                    b.HasData(
                        new
                        {
                            ManagerId = 1,
                            EnterpriseId = 1
                        },
                        new
                        {
                            ManagerId = 2,
                            EnterpriseId = 1
                        },
                        new
                        {
                            ManagerId = 1,
                            EnterpriseId = 2
                        },
                        new
                        {
                            ManagerId = 2,
                            EnterpriseId = 2
                        },
                        new
                        {
                            ManagerId = 1,
                            EnterpriseId = 3
                        },
                        new
                        {
                            ManagerId = 3,
                            EnterpriseId = 3
                        },
                        new
                        {
                            ManagerId = 1,
                            EnterpriseId = 4
                        },
                        new
                        {
                            ManagerId = 1,
                            EnterpriseId = 5
                        },
                        new
                        {
                            ManagerId = 3,
                            EnterpriseId = 6
                        });
                });

            modelBuilder.Entity("MotorPool.Domain.GeoPoint", b =>
                {
                    b.Property<int>("GeoPointId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GeoPointId"));

                    b.Property<double>("Latitude")
                        .HasPrecision(9, 6)
                        .HasColumnType("float(9)");

                    b.Property<double>("Longitude")
                        .HasPrecision(9, 6)
                        .HasColumnType("float(9)");

                    b.Property<DateTime>("RecordedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int");

                    b.HasKey("GeoPointId");

                    b.HasIndex("VehicleId");

                    b.ToTable("GeoPoints");

                    b.HasData(
                        new
                        {
                            GeoPointId = 1,
                            Latitude = 40.730609999999999,
                            Longitude = -73.935242000000002,
                            RecordedAt = new DateTime(2024, 2, 8, 12, 30, 41, 90, DateTimeKind.Utc).AddTicks(6933),
                            VehicleId = 15022
                        },
                        new
                        {
                            GeoPointId = 2,
                            Latitude = 40.731610000000003,
                            Longitude = -73.935242000000002,
                            RecordedAt = new DateTime(2024, 2, 8, 13, 30, 41, 90, DateTimeKind.Utc).AddTicks(6933),
                            VehicleId = 15022
                        },
                        new
                        {
                            GeoPointId = 3,
                            Latitude = 40.732610000000001,
                            Longitude = -73.935242000000002,
                            RecordedAt = new DateTime(2024, 2, 8, 15, 0, 41, 90, DateTimeKind.Utc).AddTicks(6933),
                            VehicleId = 15022
                        },
                        new
                        {
                            GeoPointId = 4,
                            Latitude = 40.733609999999999,
                            Longitude = -73.935242000000002,
                            RecordedAt = new DateTime(2024, 2, 8, 15, 45, 41, 90, DateTimeKind.Utc).AddTicks(6933),
                            VehicleId = 15022
                        },
                        new
                        {
                            GeoPointId = 5,
                            Latitude = 40.734610000000004,
                            Longitude = -73.935242000000002,
                            RecordedAt = new DateTime(2024, 2, 8, 17, 15, 41, 90, DateTimeKind.Utc).AddTicks(6933),
                            VehicleId = 15022
                        },
                        new
                        {
                            GeoPointId = 6,
                            Latitude = 40.735610000000001,
                            Longitude = -73.935242000000002,
                            RecordedAt = new DateTime(2024, 2, 8, 18, 0, 41, 90, DateTimeKind.Utc).AddTicks(6933),
                            VehicleId = 15022
                        },
                        new
                        {
                            GeoPointId = 7,
                            Latitude = 40.736609999999999,
                            Longitude = -73.935242000000002,
                            RecordedAt = new DateTime(2024, 2, 8, 18, 45, 41, 90, DateTimeKind.Utc).AddTicks(6933),
                            VehicleId = 15022
                        },
                        new
                        {
                            GeoPointId = 8,
                            Latitude = 40.737609999999997,
                            Longitude = -73.935242000000002,
                            RecordedAt = new DateTime(2024, 2, 8, 20, 15, 41, 90, DateTimeKind.Utc).AddTicks(6933),
                            VehicleId = 15022
                        },
                        new
                        {
                            GeoPointId = 9,
                            Latitude = 40.738610000000001,
                            Longitude = -73.935242000000002,
                            RecordedAt = new DateTime(2024, 2, 8, 21, 0, 41, 90, DateTimeKind.Utc).AddTicks(6933),
                            VehicleId = 15022
                        },
                        new
                        {
                            GeoPointId = 10,
                            Latitude = 40.739609999999999,
                            Longitude = -73.935242000000002,
                            RecordedAt = new DateTime(2024, 2, 8, 21, 45, 41, 90, DateTimeKind.Utc).AddTicks(6933),
                            VehicleId = 15022
                        },
                        new
                        {
                            GeoPointId = 11,
                            Latitude = 40.740609999999997,
                            Longitude = -73.935242000000002,
                            RecordedAt = new DateTime(2024, 2, 8, 23, 15, 41, 90, DateTimeKind.Utc).AddTicks(6933),
                            VehicleId = 15022
                        },
                        new
                        {
                            GeoPointId = 12,
                            Latitude = 40.741610000000001,
                            Longitude = -73.935242000000002,
                            RecordedAt = new DateTime(2024, 2, 9, 0, 0, 41, 90, DateTimeKind.Utc).AddTicks(6933),
                            VehicleId = 15022
                        },
                        new
                        {
                            GeoPointId = 13,
                            Latitude = 40.742609999999999,
                            Longitude = -73.935242000000002,
                            RecordedAt = new DateTime(2024, 2, 9, 0, 45, 41, 90, DateTimeKind.Utc).AddTicks(6933),
                            VehicleId = 15022
                        },
                        new
                        {
                            GeoPointId = 14,
                            Latitude = 40.743609999999997,
                            Longitude = -73.935242000000002,
                            RecordedAt = new DateTime(2024, 2, 9, 2, 15, 41, 90, DateTimeKind.Utc).AddTicks(6933),
                            VehicleId = 15022
                        },
                        new
                        {
                            GeoPointId = 15,
                            Latitude = 40.744610000000002,
                            Longitude = -73.935242000000002,
                            RecordedAt = new DateTime(2024, 2, 9, 3, 0, 41, 90, DateTimeKind.Utc).AddTicks(6933),
                            VehicleId = 15022
                        },
                        new
                        {
                            GeoPointId = 16,
                            Latitude = 40.745609999999999,
                            Longitude = -73.935242000000002,
                            RecordedAt = new DateTime(2024, 2, 9, 3, 45, 41, 90, DateTimeKind.Utc).AddTicks(6933),
                            VehicleId = 15022
                        },
                        new
                        {
                            GeoPointId = 17,
                            Latitude = 40.746609999999997,
                            Longitude = -73.935242000000002,
                            RecordedAt = new DateTime(2024, 2, 9, 5, 15, 41, 90, DateTimeKind.Utc).AddTicks(6933),
                            VehicleId = 15022
                        },
                        new
                        {
                            GeoPointId = 18,
                            Latitude = 40.747610000000002,
                            Longitude = -73.935242000000002,
                            RecordedAt = new DateTime(2024, 2, 9, 6, 0, 41, 90, DateTimeKind.Utc).AddTicks(6933),
                            VehicleId = 15022
                        },
                        new
                        {
                            GeoPointId = 19,
                            Latitude = 40.748609999999999,
                            Longitude = -73.935242000000002,
                            RecordedAt = new DateTime(2024, 2, 9, 6, 45, 41, 90, DateTimeKind.Utc).AddTicks(6933),
                            VehicleId = 15022
                        },
                        new
                        {
                            GeoPointId = 20,
                            Latitude = 40.749609999999997,
                            Longitude = -73.935242000000002,
                            RecordedAt = new DateTime(2024, 2, 9, 8, 15, 41, 90, DateTimeKind.Utc).AddTicks(6933),
                            VehicleId = 15022
                        },
                        new
                        {
                            GeoPointId = 21,
                            Latitude = 48.208199999999998,
                            Longitude = 16.373799999999999,
                            RecordedAt = new DateTime(2023, 12, 9, 9, 30, 41, 90, DateTimeKind.Utc).AddTicks(7033),
                            VehicleId = 20213
                        },
                        new
                        {
                            GeoPointId = 22,
                            Latitude = 48.209200000000003,
                            Longitude = 16.3748,
                            RecordedAt = new DateTime(2023, 12, 9, 10, 30, 41, 90, DateTimeKind.Utc).AddTicks(7033),
                            VehicleId = 20213
                        },
                        new
                        {
                            GeoPointId = 23,
                            Latitude = 48.2102,
                            Longitude = 16.375800000000002,
                            RecordedAt = new DateTime(2023, 12, 9, 12, 0, 41, 90, DateTimeKind.Utc).AddTicks(7033),
                            VehicleId = 20213
                        },
                        new
                        {
                            GeoPointId = 24,
                            Latitude = 48.211199999999998,
                            Longitude = 16.376799999999999,
                            RecordedAt = new DateTime(2023, 12, 9, 12, 45, 41, 90, DateTimeKind.Utc).AddTicks(7033),
                            VehicleId = 20213
                        },
                        new
                        {
                            GeoPointId = 25,
                            Latitude = 48.212200000000003,
                            Longitude = 16.377800000000001,
                            RecordedAt = new DateTime(2023, 12, 9, 14, 15, 41, 90, DateTimeKind.Utc).AddTicks(7033),
                            VehicleId = 20213
                        },
                        new
                        {
                            GeoPointId = 26,
                            Latitude = 48.213200000000001,
                            Longitude = 16.378799999999998,
                            RecordedAt = new DateTime(2023, 12, 9, 15, 0, 41, 90, DateTimeKind.Utc).AddTicks(7033),
                            VehicleId = 20213
                        },
                        new
                        {
                            GeoPointId = 27,
                            Latitude = 48.214199999999998,
                            Longitude = 16.379799999999999,
                            RecordedAt = new DateTime(2023, 12, 9, 15, 45, 41, 90, DateTimeKind.Utc).AddTicks(7033),
                            VehicleId = 20213
                        },
                        new
                        {
                            GeoPointId = 28,
                            Latitude = 48.215200000000003,
                            Longitude = 16.380800000000001,
                            RecordedAt = new DateTime(2023, 12, 9, 17, 15, 41, 90, DateTimeKind.Utc).AddTicks(7033),
                            VehicleId = 20213
                        },
                        new
                        {
                            GeoPointId = 29,
                            Latitude = 48.216200000000001,
                            Longitude = 16.381799999999998,
                            RecordedAt = new DateTime(2023, 12, 9, 18, 0, 41, 90, DateTimeKind.Utc).AddTicks(7033),
                            VehicleId = 20213
                        },
                        new
                        {
                            GeoPointId = 30,
                            Latitude = 48.217199999999998,
                            Longitude = 16.3828,
                            RecordedAt = new DateTime(2023, 12, 9, 18, 45, 41, 90, DateTimeKind.Utc).AddTicks(7033),
                            VehicleId = 20213
                        },
                        new
                        {
                            GeoPointId = 31,
                            Latitude = 55.755800000000001,
                            Longitude = 37.617600000000003,
                            RecordedAt = new DateTime(2024, 1, 15, 16, 30, 41, 90, DateTimeKind.Utc).AddTicks(7040),
                            VehicleId = 27094
                        },
                        new
                        {
                            GeoPointId = 32,
                            Latitude = 55.756799999999998,
                            Longitude = 37.618600000000001,
                            RecordedAt = new DateTime(2024, 1, 15, 17, 30, 41, 90, DateTimeKind.Utc).AddTicks(7040),
                            VehicleId = 27094
                        },
                        new
                        {
                            GeoPointId = 33,
                            Latitude = 55.757800000000003,
                            Longitude = 37.619599999999998,
                            RecordedAt = new DateTime(2024, 1, 15, 19, 0, 41, 90, DateTimeKind.Utc).AddTicks(7040),
                            VehicleId = 27094
                        },
                        new
                        {
                            GeoPointId = 34,
                            Latitude = 55.758800000000001,
                            Longitude = 37.620600000000003,
                            RecordedAt = new DateTime(2024, 1, 15, 19, 45, 41, 90, DateTimeKind.Utc).AddTicks(7040),
                            VehicleId = 27094
                        },
                        new
                        {
                            GeoPointId = 35,
                            Latitude = 55.759799999999998,
                            Longitude = 37.621600000000001,
                            RecordedAt = new DateTime(2024, 1, 15, 21, 15, 41, 90, DateTimeKind.Utc).AddTicks(7040),
                            VehicleId = 27094
                        },
                        new
                        {
                            GeoPointId = 36,
                            Latitude = 55.760800000000003,
                            Longitude = 37.622599999999998,
                            RecordedAt = new DateTime(2024, 1, 15, 22, 0, 41, 90, DateTimeKind.Utc).AddTicks(7040),
                            VehicleId = 27094
                        },
                        new
                        {
                            GeoPointId = 37,
                            Latitude = 55.761800000000001,
                            Longitude = 37.623600000000003,
                            RecordedAt = new DateTime(2024, 1, 15, 22, 45, 41, 90, DateTimeKind.Utc).AddTicks(7040),
                            VehicleId = 27094
                        },
                        new
                        {
                            GeoPointId = 38,
                            Latitude = 55.762799999999999,
                            Longitude = 37.624600000000001,
                            RecordedAt = new DateTime(2024, 1, 16, 0, 15, 41, 90, DateTimeKind.Utc).AddTicks(7040),
                            VehicleId = 27094
                        },
                        new
                        {
                            GeoPointId = 39,
                            Latitude = 55.763800000000003,
                            Longitude = 37.625599999999999,
                            RecordedAt = new DateTime(2024, 1, 16, 1, 0, 41, 90, DateTimeKind.Utc).AddTicks(7040),
                            VehicleId = 27094
                        },
                        new
                        {
                            GeoPointId = 40,
                            Latitude = 55.764800000000001,
                            Longitude = 37.626600000000003,
                            RecordedAt = new DateTime(2024, 1, 16, 1, 45, 41, 90, DateTimeKind.Utc).AddTicks(7040),
                            VehicleId = 27094
                        },
                        new
                        {
                            GeoPointId = 41,
                            Latitude = 55.765799999999999,
                            Longitude = 37.627600000000001,
                            RecordedAt = new DateTime(2024, 1, 16, 3, 15, 41, 90, DateTimeKind.Utc).AddTicks(7040),
                            VehicleId = 27094
                        },
                        new
                        {
                            GeoPointId = 42,
                            Latitude = 55.766800000000003,
                            Longitude = 37.628599999999999,
                            RecordedAt = new DateTime(2024, 1, 16, 4, 0, 41, 90, DateTimeKind.Utc).AddTicks(7040),
                            VehicleId = 27094
                        },
                        new
                        {
                            GeoPointId = 43,
                            Latitude = 55.767800000000001,
                            Longitude = 37.629600000000003,
                            RecordedAt = new DateTime(2024, 1, 16, 4, 45, 41, 90, DateTimeKind.Utc).AddTicks(7040),
                            VehicleId = 27094
                        },
                        new
                        {
                            GeoPointId = 44,
                            Latitude = 55.768799999999999,
                            Longitude = 37.630600000000001,
                            RecordedAt = new DateTime(2024, 1, 16, 6, 15, 41, 90, DateTimeKind.Utc).AddTicks(7040),
                            VehicleId = 27094
                        },
                        new
                        {
                            GeoPointId = 45,
                            Latitude = 55.769799999999996,
                            Longitude = 37.631599999999999,
                            RecordedAt = new DateTime(2024, 1, 16, 7, 0, 41, 90, DateTimeKind.Utc).AddTicks(7040),
                            VehicleId = 27094
                        },
                        new
                        {
                            GeoPointId = 46,
                            Latitude = 55.770800000000001,
                            Longitude = 37.632599999999996,
                            RecordedAt = new DateTime(2024, 1, 16, 7, 45, 41, 90, DateTimeKind.Utc).AddTicks(7040),
                            VehicleId = 27094
                        },
                        new
                        {
                            GeoPointId = 47,
                            Latitude = 55.771799999999999,
                            Longitude = 37.633600000000001,
                            RecordedAt = new DateTime(2024, 1, 16, 9, 15, 41, 90, DateTimeKind.Utc).AddTicks(7040),
                            VehicleId = 27094
                        },
                        new
                        {
                            GeoPointId = 48,
                            Latitude = 55.772799999999997,
                            Longitude = 37.634599999999999,
                            RecordedAt = new DateTime(2024, 1, 16, 10, 0, 41, 90, DateTimeKind.Utc).AddTicks(7040),
                            VehicleId = 27094
                        },
                        new
                        {
                            GeoPointId = 49,
                            Latitude = 55.773800000000001,
                            Longitude = 37.635599999999997,
                            RecordedAt = new DateTime(2024, 1, 16, 10, 45, 41, 90, DateTimeKind.Utc).AddTicks(7040),
                            VehicleId = 27094
                        },
                        new
                        {
                            GeoPointId = 50,
                            Latitude = 55.774799999999999,
                            Longitude = 37.636600000000001,
                            RecordedAt = new DateTime(2024, 1, 16, 12, 15, 41, 90, DateTimeKind.Utc).AddTicks(7040),
                            VehicleId = 27094
                        },
                        new
                        {
                            GeoPointId = 51,
                            Latitude = 55.775799999999997,
                            Longitude = 37.637599999999999,
                            RecordedAt = new DateTime(2024, 1, 16, 13, 0, 41, 90, DateTimeKind.Utc).AddTicks(7040),
                            VehicleId = 27094
                        },
                        new
                        {
                            GeoPointId = 52,
                            Latitude = 55.776800000000001,
                            Longitude = 37.638599999999997,
                            RecordedAt = new DateTime(2024, 1, 16, 13, 45, 41, 90, DateTimeKind.Utc).AddTicks(7040),
                            VehicleId = 27094
                        },
                        new
                        {
                            GeoPointId = 53,
                            Latitude = 55.777799999999999,
                            Longitude = 37.639600000000002,
                            RecordedAt = new DateTime(2024, 1, 16, 15, 15, 41, 90, DateTimeKind.Utc).AddTicks(7040),
                            VehicleId = 27094
                        },
                        new
                        {
                            GeoPointId = 54,
                            Latitude = 55.778799999999997,
                            Longitude = 37.640599999999999,
                            RecordedAt = new DateTime(2024, 1, 16, 16, 0, 41, 90, DateTimeKind.Utc).AddTicks(7040),
                            VehicleId = 27094
                        },
                        new
                        {
                            GeoPointId = 55,
                            Latitude = 55.779800000000002,
                            Longitude = 37.641599999999997,
                            RecordedAt = new DateTime(2024, 1, 16, 16, 45, 41, 90, DateTimeKind.Utc).AddTicks(7040),
                            VehicleId = 27094
                        });
                });

            modelBuilder.Entity("MotorPool.Domain.Manager", b =>
                {
                    b.Property<int>("ManagerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ManagerId"));

                    b.HasKey("ManagerId");

                    b.ToTable("Managers");

                    b.HasData(
                        new
                        {
                            ManagerId = 1
                        },
                        new
                        {
                            ManagerId = 2
                        },
                        new
                        {
                            ManagerId = 3
                        });
                });

            modelBuilder.Entity("MotorPool.Domain.Vehicle", b =>
                {
                    b.Property<int>("VehicleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VehicleId"));

                    b.Property<DateTime>("AcquiredOn")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Cost")
                        .HasPrecision(15, 5)
                        .HasColumnType("decimal(15,5)");

                    b.Property<int>("EnterpriseId")
                        .HasColumnType("int");

                    b.Property<string>("ManufactureLand")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ManufactureYear")
                        .HasColumnType("int");

                    b.Property<decimal>("Mileage")
                        .HasPrecision(13, 3)
                        .HasColumnType("decimal(13,3)");

                    b.Property<string>("MotorVIN")
                        .IsRequired()
                        .HasMaxLength(17)
                        .HasColumnType("nvarchar(17)");

                    b.Property<int>("VehicleBrandId")
                        .HasColumnType("int");

                    b.HasKey("VehicleId");

                    b.HasIndex("EnterpriseId");

                    b.HasIndex("MotorVIN")
                        .IsUnique();

                    b.HasIndex("VehicleBrandId");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("MotorPool.Domain.VehicleBrand", b =>
                {
                    b.Property<int>("VehicleBrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VehicleBrandId"));

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("FuelTankCapacityLiters")
                        .HasPrecision(10, 4)
                        .HasColumnType("decimal(10,4)");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("NumberOfSeats")
                        .HasColumnType("int");

                    b.Property<decimal>("PayloadCapacityKg")
                        .HasPrecision(11, 5)
                        .HasColumnType("decimal(11,5)");

                    b.Property<int>("ReleaseYear")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VehicleBrandId");

                    b.ToTable("VehicleBrands");

                    b.HasData(
                        new
                        {
                            VehicleBrandId = 1,
                            CompanyName = "Toyota",
                            FuelTankCapacityLiters = 50m,
                            ModelName = "Corolla",
                            NumberOfSeats = 5,
                            PayloadCapacityKg = 450m,
                            ReleaseYear = 2020,
                            Type = "PassengerCar"
                        },
                        new
                        {
                            VehicleBrandId = 2,
                            CompanyName = "Volvo",
                            FuelTankCapacityLiters = 300m,
                            ModelName = "B7R",
                            NumberOfSeats = 50,
                            PayloadCapacityKg = 7500m,
                            ReleaseYear = 2019,
                            Type = "Bus"
                        },
                        new
                        {
                            VehicleBrandId = 3,
                            CompanyName = "Scania",
                            FuelTankCapacityLiters = 400m,
                            ModelName = "P Series",
                            NumberOfSeats = 3,
                            PayloadCapacityKg = 15000m,
                            ReleaseYear = 2018,
                            Type = "Truck"
                        },
                        new
                        {
                            VehicleBrandId = 4,
                            CompanyName = "Mercedes-Benz",
                            FuelTankCapacityLiters = 275m,
                            ModelName = "Citaro",
                            NumberOfSeats = 45,
                            PayloadCapacityKg = 18000m,
                            ReleaseYear = 2021,
                            Type = "Bus"
                        },
                        new
                        {
                            VehicleBrandId = 5,
                            CompanyName = "Ford",
                            FuelTankCapacityLiters = 80m,
                            ModelName = "Transit",
                            NumberOfSeats = 3,
                            PayloadCapacityKg = 1200m,
                            ReleaseYear = 2022,
                            Type = "Truck"
                        });
                });

            modelBuilder.Entity("MotorPool.Domain.Driver", b =>
                {
                    b.HasOne("MotorPool.Domain.Vehicle", "ActiveVehicle")
                        .WithMany()
                        .HasForeignKey("ActiveVehicleId");

                    b.HasOne("MotorPool.Domain.Enterprise", "Enterprise")
                        .WithMany("Drivers")
                        .HasForeignKey("EnterpriseId");

                    b.Navigation("ActiveVehicle");

                    b.Navigation("Enterprise");
                });

            modelBuilder.Entity("MotorPool.Domain.DriverVehicle", b =>
                {
                    b.HasOne("MotorPool.Domain.Driver", "Driver")
                        .WithMany("DriverVehicles")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MotorPool.Domain.Vehicle", "Vehicle")
                        .WithMany("DriverVehicles")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Driver");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("MotorPool.Domain.EnterpriseManager", b =>
                {
                    b.HasOne("MotorPool.Domain.Enterprise", "Enterprise")
                        .WithMany("ManagerLinks")
                        .HasForeignKey("EnterpriseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MotorPool.Domain.Manager", "Manager")
                        .WithMany("EnterpriseLinks")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Enterprise");

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("MotorPool.Domain.GeoPoint", b =>
                {
                    b.HasOne("MotorPool.Domain.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("MotorPool.Domain.Vehicle", b =>
                {
                    b.HasOne("MotorPool.Domain.Enterprise", "Enterprise")
                        .WithMany("Vehicles")
                        .HasForeignKey("EnterpriseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MotorPool.Domain.VehicleBrand", "VehicleBrand")
                        .WithMany("Vehicles")
                        .HasForeignKey("VehicleBrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Enterprise");

                    b.Navigation("VehicleBrand");
                });

            modelBuilder.Entity("MotorPool.Domain.Driver", b =>
                {
                    b.Navigation("DriverVehicles");
                });

            modelBuilder.Entity("MotorPool.Domain.Enterprise", b =>
                {
                    b.Navigation("Drivers");

                    b.Navigation("ManagerLinks");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("MotorPool.Domain.Manager", b =>
                {
                    b.Navigation("EnterpriseLinks");
                });

            modelBuilder.Entity("MotorPool.Domain.Vehicle", b =>
                {
                    b.Navigation("DriverVehicles");
                });

            modelBuilder.Entity("MotorPool.Domain.VehicleBrand", b =>
                {
                    b.Navigation("Vehicles");
                });
#pragma warning restore 612, 618
        }
    }
}
