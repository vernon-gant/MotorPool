// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MotorPool.Persistence;

#nullable disable

namespace MotorPool.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241015202509_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MotorPool.Domain.Driver", b =>
                {
                    b.Property<int>("DriverId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DriverId"));

                    b.Property<int?>("ActiveVehicleId")
                        .HasColumnType("int");

                    b.Property<int?>("EnterpriseId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Salary")
                        .HasPrecision(9, 3)
                        .HasColumnType("decimal(9,3)");

                    b.HasKey("DriverId");

                    b.HasIndex("ActiveVehicleId");

                    b.HasIndex("EnterpriseId");

                    b.ToTable("Drivers");
                });

            modelBuilder.Entity("MotorPool.Domain.DriverVehicle", b =>
                {
                    b.Property<int>("DriverId")
                        .HasColumnType("int");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int");

                    b.HasKey("DriverId", "VehicleId");

                    b.HasIndex("VehicleId");

                    b.ToTable("DriverVehicle");
                });

            modelBuilder.Entity("MotorPool.Domain.Enterprise", b =>
                {
                    b.Property<int>("EnterpriseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EnterpriseId"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateOnly>("FoundedOn")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TimeZoneId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("VAT")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("EnterpriseId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("VAT")
                        .IsUnique();

                    b.ToTable("Enterprises");
                });

            modelBuilder.Entity("MotorPool.Domain.EnterpriseManager", b =>
                {
                    b.Property<int>("ManagerId")
                        .HasColumnType("int");

                    b.Property<int>("EnterpriseId")
                        .HasColumnType("int");

                    b.HasKey("ManagerId", "EnterpriseId");

                    b.HasIndex("EnterpriseId");

                    b.ToTable("EnterpriseManagers");
                });

            modelBuilder.Entity("MotorPool.Domain.GeoPoint", b =>
                {
                    b.Property<int>("GeoPointId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GeoPointId"));

                    b.Property<double>("Latitude")
                        .HasPrecision(9, 6)
                        .HasColumnType("float(9)");

                    b.Property<double>("Longitude")
                        .HasPrecision(9, 6)
                        .HasColumnType("float(9)");

                    b.Property<DateTime>("RecordedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("TripId")
                        .HasColumnType("int");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int");

                    b.HasKey("GeoPointId");

                    b.HasIndex("TripId");

                    b.HasIndex("VehicleId");

                    b.ToTable("GeoPoints");
                });

            modelBuilder.Entity("MotorPool.Domain.Manager", b =>
                {
                    b.Property<int>("ManagerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ManagerId"));

                    b.HasKey("ManagerId");

                    b.ToTable("Managers");
                });

            modelBuilder.Entity("MotorPool.Domain.Trip", b =>
                {
                    b.Property<int>("TripId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TripId"));

                    b.Property<int?>("EndGeoPointId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("StartGeoPointId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int");

                    b.HasKey("TripId");

                    b.HasIndex("EndGeoPointId")
                        .IsUnique()
                        .HasFilter("[EndGeoPointId] IS NOT NULL");

                    b.HasIndex("StartGeoPointId")
                        .IsUnique()
                        .HasFilter("[StartGeoPointId] IS NOT NULL");

                    b.HasIndex("VehicleId");

                    b.ToTable("Trips");
                });

            modelBuilder.Entity("MotorPool.Domain.Vehicle", b =>
                {
                    b.Property<int>("VehicleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VehicleId"));

                    b.Property<DateTime>("AcquiredOn")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Cost")
                        .HasPrecision(15, 5)
                        .HasColumnType("decimal(15,5)");

                    b.Property<int>("EnterpriseId")
                        .HasColumnType("int");

                    b.Property<string>("ManufactureLand")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ManufactureYear")
                        .HasColumnType("int");

                    b.Property<decimal>("Mileage")
                        .HasPrecision(13, 3)
                        .HasColumnType("decimal(13,3)");

                    b.Property<string>("MotorVIN")
                        .IsRequired()
                        .HasMaxLength(17)
                        .HasColumnType("nvarchar(17)");

                    b.Property<int>("VehicleBrandId")
                        .HasColumnType("int");

                    b.HasKey("VehicleId");

                    b.HasIndex("EnterpriseId");

                    b.HasIndex("MotorVIN")
                        .IsUnique();

                    b.HasIndex("VehicleBrandId");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("MotorPool.Domain.VehicleBrand", b =>
                {
                    b.Property<int>("VehicleBrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VehicleBrandId"));

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("FuelTankCapacityLiters")
                        .HasPrecision(10, 4)
                        .HasColumnType("decimal(10,4)");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("NumberOfSeats")
                        .HasColumnType("int");

                    b.Property<decimal>("PayloadCapacityKg")
                        .HasPrecision(11, 5)
                        .HasColumnType("decimal(11,5)");

                    b.Property<int>("ReleaseYear")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VehicleBrandId");

                    b.ToTable("VehicleBrands");
                });

            modelBuilder.Entity("MotorPool.Domain.Driver", b =>
                {
                    b.HasOne("MotorPool.Domain.Vehicle", "ActiveVehicle")
                        .WithMany()
                        .HasForeignKey("ActiveVehicleId");

                    b.HasOne("MotorPool.Domain.Enterprise", "Enterprise")
                        .WithMany("Drivers")
                        .HasForeignKey("EnterpriseId");

                    b.Navigation("ActiveVehicle");

                    b.Navigation("Enterprise");
                });

            modelBuilder.Entity("MotorPool.Domain.DriverVehicle", b =>
                {
                    b.HasOne("MotorPool.Domain.Driver", "Driver")
                        .WithMany("DriverVehicles")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MotorPool.Domain.Vehicle", "Vehicle")
                        .WithMany("DriverVehicles")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Driver");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("MotorPool.Domain.EnterpriseManager", b =>
                {
                    b.HasOne("MotorPool.Domain.Enterprise", "Enterprise")
                        .WithMany("ManagerLinks")
                        .HasForeignKey("EnterpriseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MotorPool.Domain.Manager", "Manager")
                        .WithMany("EnterpriseLinks")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Enterprise");

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("MotorPool.Domain.GeoPoint", b =>
                {
                    b.HasOne("MotorPool.Domain.Trip", "Trip")
                        .WithMany("GeoPoints")
                        .HasForeignKey("TripId");

                    b.HasOne("MotorPool.Domain.Vehicle", "Vehicle")
                        .WithMany("GeoPoints")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Trip");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("MotorPool.Domain.Trip", b =>
                {
                    b.HasOne("MotorPool.Domain.GeoPoint", "EndGeoPoint")
                        .WithOne()
                        .HasForeignKey("MotorPool.Domain.Trip", "EndGeoPointId");

                    b.HasOne("MotorPool.Domain.GeoPoint", "StartGeoPoint")
                        .WithOne()
                        .HasForeignKey("MotorPool.Domain.Trip", "StartGeoPointId");

                    b.HasOne("MotorPool.Domain.Vehicle", "Vehicle")
                        .WithMany("Trips")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EndGeoPoint");

                    b.Navigation("StartGeoPoint");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("MotorPool.Domain.Vehicle", b =>
                {
                    b.HasOne("MotorPool.Domain.Enterprise", "Enterprise")
                        .WithMany("Vehicles")
                        .HasForeignKey("EnterpriseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MotorPool.Domain.VehicleBrand", "VehicleBrand")
                        .WithMany("Vehicles")
                        .HasForeignKey("VehicleBrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Enterprise");

                    b.Navigation("VehicleBrand");
                });

            modelBuilder.Entity("MotorPool.Domain.Driver", b =>
                {
                    b.Navigation("DriverVehicles");
                });

            modelBuilder.Entity("MotorPool.Domain.Enterprise", b =>
                {
                    b.Navigation("Drivers");

                    b.Navigation("ManagerLinks");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("MotorPool.Domain.Manager", b =>
                {
                    b.Navigation("EnterpriseLinks");
                });

            modelBuilder.Entity("MotorPool.Domain.Trip", b =>
                {
                    b.Navigation("GeoPoints");
                });

            modelBuilder.Entity("MotorPool.Domain.Vehicle", b =>
                {
                    b.Navigation("DriverVehicles");

                    b.Navigation("GeoPoints");

                    b.Navigation("Trips");
                });

            modelBuilder.Entity("MotorPool.Domain.VehicleBrand", b =>
                {
                    b.Navigation("Vehicles");
                });
#pragma warning restore 612, 618
        }
    }
}
